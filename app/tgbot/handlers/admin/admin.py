import logging

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram_dialog import DialogManager, StartMode

from infrastructure.database.repositories.admin import AdminRepo
from infrastructure.database.repositories.bot import BotRepo
from tgbot.states.admin.menu import AdminMenu

logger = logging.getLogger(__name__)


async def admin_start(m: Message, dialog_manager: DialogManager):
    await dialog_manager.start(AdminMenu.admin_menu, mode=StartMode.RESET_STACK)


async def start_maintenance(m: Message, bot_repo: BotRepo):
    await bot_repo.set_maintenance()
    await m.reply('‚ôªÔ∏è –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω')
    logger.info(f'User {m.from_user.id} turned on maintenance mode')


async def stop_maintenance(m: Message, bot_repo: BotRepo):
    await bot_repo.disable_maintenance()
    await m.reply('‚úÖ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω')
    logger.info(f'User {m.from_user.id} turned off maintenance mode')


async def add_admin(m: Message, command: CommandObject, admin_repo: AdminRepo):
    new_admin = command.args
    try:
        admin_id = int(new_admin)
    except TypeError:
        await m.reply('‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    except ValueError:
        await m.reply('‚ùå Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!')
        return
    result = await admin_repo.add_admin(admin_id)
    if result:
        logger.info(f'User {m.from_user.id} added admin {admin_id}')
        await m.reply(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤')
    else:
        await m.reply(f'‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        logger.info(f'User {m.from_user.id} tried to add admin {admin_id}, but he is not found')


async def ban_user(m: Message, command: CommandObject, admin_repo: AdminRepo):
    user_id = command.args
    try:
        user_id = int(user_id)
    except TypeError:
        await m.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return
    except ValueError:
        await m.reply('Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!')
        return
    result = await admin_repo.ban_user(user_id)
    if result:
        logger.info(f'User {m.from_user.id} banned {user_id}')
        await m.reply(f'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    else:
        await m.reply(f'‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        logger.info(f'User {m.from_user.id} tried to ban {user_id}, but he is not found')


def register_admin_router(router: Router):
    router.message.register(start_maintenance,
                            Command(commands=['maintenance'], commands_prefix='/!'), state='*')
    router.message.register(stop_maintenance,
                            Command(commands=['stop_maintenance'], commands_prefix='/!'), state='*')
    router.message.register(add_admin,
                            Command(commands=['add_admin'], commands_prefix='/!'), state='*')
    router.message.register(ban_user,
                            Command(commands=['ban'], commands_prefix='/!'), state='*')
